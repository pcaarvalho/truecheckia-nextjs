'use client';

import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuth } from '@/lib/auth/auth-context';
import { 
  FileText, 
  Clock, 
  Shield,
  Zap,
  Activity,
  Sparkles,
  ArrowRight,
  Loader2,
  AlertCircle
} from 'lucide-react';

// WCAG AAA Accessibility Note:
// This dashboard implements high contrast colors with 7:1+ ratio for all text
// Background hierarchy: #0c0d12 (main) → #13141a (cards) → #1a1c23 (muted)
// Text hierarchy: #fafafa (primary) → #e5e7eb (secondary) → #b5b8c2 (muted)
// All interactive elements include focus indicators and motion-safe alternatives

// Custom hook for dashboard stats
function useDashboardStats() {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['dashboard-stats'],
    queryFn: async () => {
      const token = localStorage.getItem('accessToken');
      const response = await fetch('/api/dashboard/stats', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch dashboard stats');
      }
      
      return response.json();
    },
    enabled: !!user,
    refetchOnWindowFocus: false,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}

function formatRelativeTime(dateString: string | null): string {
  if (!dateString) return 'Never';
  
  const date = new Date(dateString);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  if (diffMinutes < 1) return 'Just now';
  if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
  if (diffHours < 24) return `${diffHours} hours ago`;
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  
  return date.toLocaleDateString();
}

export default function DashboardPage() {
  const { user } = useAuth();
  const { data: dashboardData, isLoading, error, refetch } = useDashboardStats();
  
  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-dashboard">
        <div className="p-4 md:p-8 max-w-7xl mx-auto">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="flex flex-col items-center space-y-4">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="text-muted-accessible">Loading your dashboard...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-dashboard">
        <div className="p-4 md:p-8 max-w-7xl mx-auto">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="flex flex-col items-center space-y-4 text-center">
              <AlertCircle className="h-8 w-8 text-destructive" />
              <p className="text-muted-accessible">Failed to load dashboard data</p>
              <Button onClick={() => refetch()} variant="outline" className="focus-accessible">
                Try Again
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  // Prepare stats from API data
  const stats = [
    {
      title: 'Total Analyses',
      value: dashboardData?.totalAnalyses?.toLocaleString() || '0',
      icon: FileText,
      trend: dashboardData?.weeklyGrowth > 0 ? `+${dashboardData.weeklyGrowth}%` : dashboardData?.weeklyGrowth < 0 ? `${dashboardData.weeklyGrowth}%` : null,
      iconColor: 'text-primary',
      bgColor: 'bg-primary/10',
    },
    {
      title: 'Credits Remaining',
      value: dashboardData?.creditsRemaining?.toLocaleString() || '0',
      icon: Sparkles,
      subtitle: user?.plan || 'FREE',
      iconColor: 'text-purple-400',
      bgColor: 'bg-purple-500/10',
    },
    {
      title: 'Average AI Score',
      value: dashboardData?.avgAiProbability ? `${dashboardData.avgAiProbability}%` : 'N/A',
      icon: Shield,
      subtitle: 'Detection accuracy',
      iconColor: 'text-success',
      bgColor: 'bg-success/10',
    },
    {
      title: 'Last Analysis',
      value: formatRelativeTime(dashboardData?.lastAnalysisAt),
      icon: Clock,
      subtitle: 'Recent activity',
      iconColor: 'text-warning',
      bgColor: 'bg-warning/10',
    },
  ];

  const quickActions = [
    {
      title: 'Text Analysis',
      description: 'Check if text was generated by AI',
      icon: FileText,
      iconColor: 'text-primary',
      bgColor: 'bg-primary',
      href: '/analysis',
    },
    {
      title: 'URL Analysis',
      description: 'Analyze content from a web page',
      icon: Zap,
      iconColor: 'text-purple-400',
      bgColor: 'bg-purple-500',
      href: '/analysis',
    },
    {
      title: 'File Upload',
      description: 'Upload documents for analysis',
      icon: Sparkles,
      iconColor: 'text-success',
      bgColor: 'bg-success',
      href: '/analysis',
    },
  ];

  return (
    <div className="min-h-screen bg-dashboard">
      <div className="p-4 md:p-8 max-w-7xl mx-auto" data-testid="dashboard-content">
        {/* Header Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <h1 className="text-3xl md:text-4xl font-bold text-primary-accessible">
            Welcome back{user?.name ? `, ${user.name}` : ''}!
          </h1>
          <p className="text-muted-accessible mt-2">
            Ready to analyze more content today?
          </p>
        </motion.div>

        {/* Stats Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8"
        >
          {stats.map((stat, index) => {
            const Icon = stat.icon;
            return (
              <motion.div
                key={stat.title}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                whileHover={{ scale: 1.02 }}
                className="motion-safe-animate motion-safe-hover"
              >
                <Card className="card-stats">
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium text-muted-accessible">
                      {stat.title}
                    </CardTitle>
                    <div className={`p-2 rounded-lg ${stat.bgColor}`}>
                      <Icon className={`h-4 w-4 ${stat.iconColor}`} />
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-primary-accessible">
                      {stat.value}
                    </div>
                    {stat.trend && (
                      <p className={`text-xs mt-1 font-medium ${
                        stat.trend.startsWith('+') 
                          ? 'text-success' 
                          : 'text-destructive'
                      }`}>
                        {stat.trend} vs last week
                      </p>
                    )}
                    {stat.subtitle && (
                      <p className="text-xs text-muted-accessible mt-1">
                        {stat.subtitle}
                      </p>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            );
          })}
        </motion.div>

        {/* Quick Actions */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="mb-8 motion-safe-animate"
        >
          <h2 className="text-xl font-semibold text-primary-accessible mb-4">
            Quick Actions
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {quickActions.map((action, index) => {
              const Icon = action.icon;
              return (
                <motion.div
                  key={action.title}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  className="motion-safe-animate motion-safe-hover"
                >
                  <Link href={action.href}>
                    <Card className="card-action group cursor-pointer hover:shadow-lg transition-all duration-300 focus-accessible">
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between mb-4">
                          <div className={`p-3 rounded-lg ${action.bgColor} shadow-sm`}>
                            <Icon className="h-6 w-6 text-white" />
                          </div>
                          <ArrowRight className="h-5 w-5 text-muted-accessible group-hover:text-secondary-accessible transform group-hover:translate-x-1 transition-all" />
                        </div>
                        <h3 className="font-semibold text-primary-accessible mb-2">
                          {action.title}
                        </h3>
                        <p className="text-sm text-muted-accessible">
                          {action.description}
                        </p>
                      </CardContent>
                    </Card>
                  </Link>
                </motion.div>
              );
            })}
          </div>
        </motion.div>

        {/* Recent Activity */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="motion-safe-animate"
        >
          <Card className="card-stats">
            <CardHeader>
              <CardTitle className="flex items-center text-primary-accessible">
                <Activity className="w-5 h-5 mr-2 text-primary" />
                Recent Activity
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {dashboardData?.recentAnalyses && dashboardData.recentAnalyses.length > 0 ? (
                  dashboardData.recentAnalyses.slice(0, 3).map((analysis: any, index: number) => {
                    const colors = ['bg-success', 'bg-primary', 'bg-purple-500'];
                    const isRecent = index === 0;
                    return (
                      <div key={analysis.id} className="flex items-center space-x-3">
                        <div className={`w-2 h-2 ${colors[index]} rounded-full ${isRecent ? 'animate-pulse motion-safe-animate' : ''}`} />
                        <span className="text-sm text-secondary-accessible">
                          Analysis completed: {analysis.aiScore}% AI probability, {analysis.wordCount} words
                          <span className="text-xs text-muted-accessible ml-2">
                            {formatRelativeTime(analysis.createdAt)}
                          </span>
                        </span>
                      </div>
                    );
                  })
                ) : (
                  <div className="flex items-center space-x-3">
                    <div className="w-2 h-2 bg-muted-foreground rounded-full" />
                    <span className="text-sm text-secondary-accessible">
                      No recent activity. Start your first analysis!
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="mt-8 text-center motion-safe-animate"
        >
          <div className="bg-primary rounded-2xl p-8 shadow-xl border border-accessible">
            <h3 className="text-2xl font-bold text-white mb-4">
              Ready to get started?
            </h3>
            <p className="text-primary-foreground/90 mb-6">
              Analyze your {dashboardData?.totalAnalyses > 0 ? 'next' : 'first'} text right now with our cutting-edge technology
            </p>
            <Button 
              size="lg"
              className="bg-white text-primary hover:bg-gray-50 font-semibold px-8 py-3 shadow-lg hover:shadow-xl transition-all focus-accessible"
              onClick={() => window.location.href = '/analysis'}
            >
              Start Analysis
              <ArrowRight className="ml-2 h-5 w-5" />
            </Button>
          </div>
        </motion.div>
      </div>
    </div>
  );
}