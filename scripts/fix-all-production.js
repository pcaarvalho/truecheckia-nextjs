#!/usr/bin/env node

/**
 * SCRIPT DE CORRE√á√ÉO TOTAL EM PRODU√á√ÉO
 * Resolve TODOS os problemas identificados
 */

const { PrismaClient } = require('@prisma/client')

async function fixEverything() {
  console.log('üöÄ INICIANDO CORRE√á√ÉO TOTAL EM PRODU√á√ÉO...\n')
  
  // Use a URL de produ√ß√£o diretamente
  const prodDatabaseUrl = process.env.DATABASE_URL || process.env.DATABASE_URL_PROD
  
  if (!prodDatabaseUrl || prodDatabaseUrl.includes('file:')) {
    console.error('‚ùå DATABASE_URL de produ√ß√£o n√£o configurada!')
    console.log('Configure: export DATABASE_URL="postgresql://..."')
    process.exit(1)
  }

  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: prodDatabaseUrl
      }
    }
  })

  try {
    console.log('üìä Conectando ao banco de produ√ß√£o...')
    await prisma.$connect()
    console.log('‚úÖ Conectado com sucesso!\n')

    // 1. CORRIGIR CR√âDITOS DOS USU√ÅRIOS
    console.log('üîß 1. CORRIGINDO CR√âDITOS DOS USU√ÅRIOS...')
    
    // Buscar todos os usu√°rios FREE com 0 cr√©ditos
    const usersWithZeroCredits = await prisma.user.findMany({
      where: {
        plan: 'FREE',
        credits: { lte: 0 }
      },
      select: {
        id: true,
        email: true,
        credits: true,
        createdAt: true
      }
    })
    
    console.log(`üìå Encontrados ${usersWithZeroCredits.length} usu√°rios com 0 cr√©ditos`)
    
    if (usersWithZeroCredits.length > 0) {
      // Atualizar todos de uma vez
      const updateResult = await prisma.user.updateMany({
        where: {
          plan: 'FREE',
          credits: { lte: 0 }
        },
        data: {
          credits: 10,
          creditsResetAt: new Date()
        }
      })
      
      console.log(`‚úÖ ${updateResult.count} usu√°rios atualizados com 10 cr√©ditos!`)
      
      // Listar os usu√°rios corrigidos
      console.log('\nüìã Usu√°rios corrigidos:')
      for (const user of usersWithZeroCredits) {
        console.log(`   - ${user.email} (criado em ${user.createdAt.toLocaleDateString()})`)
      }
    }

    // 2. VERIFICAR CONFIGURA√á√ÉO DE PLANOS
    console.log('\nüîß 2. VERIFICANDO CONFIGURA√á√ÉO DE PLANOS...')
    
    const planStats = await prisma.user.groupBy({
      by: ['plan'],
      _count: true,
      _min: { credits: true },
      _max: { credits: true },
      _avg: { credits: true }
    })
    
    console.log('üìä Estat√≠sticas por plano:')
    for (const stat of planStats) {
      console.log(`   ${stat.plan}: ${stat._count} usu√°rios`)
      console.log(`   ‚îî‚îÄ Cr√©ditos: Min ${stat._min.credits}, Max ${stat._max.credits}, M√©dia ${Math.round(stat._avg.credits)}`)
    }

    // 3. VERIFICAR USU√ÅRIOS RECENTES (√öLTIMAS 24H)
    console.log('\nüîß 3. VERIFICANDO USU√ÅRIOS RECENTES...')
    
    const recentUsers = await prisma.user.findMany({
      where: {
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      },
      select: {
        id: true,
        email: true,
        name: true,
        plan: true,
        credits: true,
        emailVerified: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log(`üìå ${recentUsers.length} usu√°rios criados nas √∫ltimas 24h:`)
    for (const user of recentUsers) {
      const status = user.credits > 0 ? '‚úÖ' : '‚ùå'
      console.log(`   ${status} ${user.email} - ${user.credits} cr√©ditos - Verificado: ${user.emailVerified}`)
    }

    // 4. CORRIGIR USU√ÅRIOS ESPEC√çFICOS DE TESTE
    console.log('\nüîß 4. CORRIGINDO USU√ÅRIOS DE TESTE...')
    
    const testEmails = [
      'test@example.com',
      'testnew@example.com', 
      'testfixed@example.com',
      'testcredits@example.com'
    ]
    
    for (const email of testEmails) {
      const user = await prisma.user.findUnique({
        where: { email }
      })
      
      if (user) {
        await prisma.user.update({
          where: { email },
          data: {
            credits: 10,
            emailVerified: true,
            creditsResetAt: new Date()
          }
        })
        console.log(`   ‚úÖ ${email} atualizado com 10 cr√©ditos e email verificado`)
      }
    }

    // 5. VERIFICAR SUBSCRIPTIONS
    console.log('\nüîß 5. VERIFICANDO SUBSCRIPTIONS...')
    
    const subscriptions = await prisma.subscription.count()
    console.log(`üìå Total de subscriptions: ${subscriptions}`)
    
    if (subscriptions > 0) {
      const activeSubscriptions = await prisma.subscription.findMany({
        where: {
          status: 'active'
        },
        include: {
          user: {
            select: {
              email: true,
              plan: true,
              credits: true
            }
          }
        }
      })
      
      console.log(`   ‚úÖ ${activeSubscriptions.length} subscriptions ativas`)
      for (const sub of activeSubscriptions) {
        console.log(`   ‚îî‚îÄ ${sub.user.email} (${sub.user.plan}) - ${sub.user.credits} cr√©ditos`)
      }
    }

    // 6. LIMPAR TOKENS EXPIRADOS
    console.log('\nüîß 6. LIMPANDO TOKENS EXPIRADOS...')
    
    const cleanupResult = await prisma.user.updateMany({
      where: {
        emailVerificationExpires: {
          lt: new Date()
        }
      },
      data: {
        emailVerificationToken: null,
        emailVerificationExpires: null
      }
    })
    
    console.log(`   ‚úÖ ${cleanupResult.count} tokens de verifica√ß√£o limpos`)

    // 7. RELAT√ìRIO FINAL
    console.log('\n' + '='.repeat(60))
    console.log('üìä RELAT√ìRIO FINAL:')
    console.log('='.repeat(60))
    
    const finalStats = await prisma.user.aggregate({
      _count: true,
      _avg: { credits: true }
    })
    
    const zeroCreditsCount = await prisma.user.count({
      where: {
        credits: 0
      }
    })
    
    console.log(`‚úÖ Total de usu√°rios: ${finalStats._count}`)
    console.log(`‚úÖ M√©dia de cr√©ditos: ${Math.round(finalStats._avg.credits)}`)
    console.log(`${zeroCreditsCount === 0 ? '‚úÖ' : '‚ùå'} Usu√°rios com 0 cr√©ditos: ${zeroCreditsCount}`)
    
    if (zeroCreditsCount === 0) {
      console.log('\nüéâ TODOS OS PROBLEMAS DE CR√âDITOS FORAM RESOLVIDOS!')
    } else {
      console.log('\n‚ö†Ô∏è  Ainda existem usu√°rios com 0 cr√©ditos. Execute o script novamente.')
    }

  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message)
    console.error(error)
  } finally {
    await prisma.$disconnect()
    console.log('\nüëã Conex√£o com banco encerrada.')
  }
}

// Executar
fixEverything().catch(console.error)