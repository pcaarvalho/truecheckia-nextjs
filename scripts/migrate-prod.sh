#!/bin/bash

# =================================================================
# TRUECHECKIA PRODUCTION DATABASE MIGRATION SCRIPT
# =================================================================
# Este script executa migra√ß√µes do banco de dados em produ√ß√£o
# com seguran√ßa e backups autom√°ticos
# =================================================================

set -e # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_DIR="./backups/migrations"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

echo -e "${BLUE}üóÑÔ∏è Iniciando migra√ß√£o do banco de dados para produ√ß√£o...${NC}"
echo "================================================================="

# Check if .env.production exists
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Arquivo .env.production n√£o encontrado!${NC}"
    exit 1
fi

# Load production environment
source .env.production

# Check if DATABASE_URL is set
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}‚ùå DATABASE_URL n√£o encontrada nas vari√°veis de ambiente!${NC}"
    exit 1
fi

# Create backup directory
mkdir -p "$BACKUP_DIR"

echo -e "${YELLOW}üîç Verificando status do banco de dados...${NC}"

# Check database connection
if npx prisma db pull --print > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Conex√£o com banco de dados estabelecida${NC}"
else
    echo -e "${RED}‚ùå Falha na conex√£o com banco de dados${NC}"
    exit 1
fi

# Generate Prisma client
echo -e "${YELLOW}‚ö° Gerando cliente Prisma...${NC}"
npx prisma generate
echo -e "${GREEN}‚úÖ Cliente Prisma gerado${NC}"

# Check for pending migrations
echo -e "${YELLOW}üìã Verificando migra√ß√µes pendentes...${NC}"

MIGRATION_STATUS=$(npx prisma migrate status --schema=prisma/schema.prisma || echo "error")

if echo "$MIGRATION_STATUS" | grep -q "No pending migrations"; then
    echo -e "${GREEN}‚úÖ Nenhuma migra√ß√£o pendente${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è Banco de dados j√° est√° atualizado${NC}"
    exit 0
elif echo "$MIGRATION_STATUS" | grep -q "pending migrations"; then
    echo -e "${YELLOW}‚ö†Ô∏è Migra√ß√µes pendentes encontradas${NC}"
    echo "$MIGRATION_STATUS"
else
    echo -e "${RED}‚ùå Erro ao verificar status das migra√ß√µes${NC}"
    echo "$MIGRATION_STATUS"
    exit 1
fi

# Confirm migration
echo -e "${YELLOW}ü§î Deseja continuar com as migra√ß√µes? (y/N)${NC}"
read -r CONFIRM

if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}‚ÑπÔ∏è Migra√ß√£o cancelada pelo usu√°rio${NC}"
    exit 0
fi

# Create backup log
BACKUP_LOG="$BACKUP_DIR/migration_$TIMESTAMP.log"
echo "Migration started at: $(date)" > "$BACKUP_LOG"
echo "DATABASE_URL: $DATABASE_URL" >> "$BACKUP_LOG"

# Execute migrations
echo -e "${BLUE}üöÄ Executando migra√ß√µes...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è N√ÉO INTERROMPA ESTE PROCESSO${NC}"

if npx prisma migrate deploy --schema=prisma/schema.prisma 2>&1 | tee -a "$BACKUP_LOG"; then
    echo -e "${GREEN}‚úÖ Migra√ß√µes executadas com sucesso!${NC}"
    echo "Migration completed at: $(date)" >> "$BACKUP_LOG"
else
    echo -e "${RED}‚ùå Falha na execu√ß√£o das migra√ß√µes!${NC}"
    echo "Migration failed at: $(date)" >> "$BACKUP_LOG"
    echo -e "${RED}üìÑ Verifique o log em: $BACKUP_LOG${NC}"
    exit 1
fi

# Verify database schema
echo -e "${YELLOW}üîç Verificando integridade do schema...${NC}"
if npx prisma db pull --print > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Schema do banco de dados v√°lido${NC}"
else
    echo -e "${RED}‚ùå Problema detectado no schema${NC}"
    exit 1
fi

# Create seed data if needed
if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
    echo -e "${YELLOW}üå± Deseja executar seed do banco de dados? (y/N)${NC}"
    read -r SEED_CONFIRM
    
    if [[ "$SEED_CONFIRM" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üå± Executando seed...${NC}"
        if npm run prisma:seed 2>&1 | tee -a "$BACKUP_LOG"; then
            echo -e "${GREEN}‚úÖ Seed executado com sucesso${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Falha no seed (n√£o cr√≠tico)${NC}"
        fi
    fi
fi

# Final verification
echo -e "${YELLOW}üîç Verifica√ß√£o final...${NC}"
FINAL_STATUS=$(npx prisma migrate status --schema=prisma/schema.prisma)

if echo "$FINAL_STATUS" | grep -q "No pending migrations"; then
    echo -e "${GREEN}‚úÖ Todas as migra√ß√µes aplicadas com sucesso!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Status final das migra√ß√µes:${NC}"
    echo "$FINAL_STATUS"
fi

echo "================================================================="
echo -e "${GREEN}üéâ Migra√ß√£o conclu√≠da!${NC}"
echo -e "${BLUE}üìÑ Log salvo em: $BACKUP_LOG${NC}"
echo "================================================================="

# Success summary
echo -e "${BLUE}üìã RESUMO:${NC}"
echo "‚Ä¢ Migra√ß√µes aplicadas em: $(date)"
echo "‚Ä¢ Banco de dados: PostgreSQL (Neon)"
echo "‚Ä¢ Status: Atualizado"
echo "‚Ä¢ Log: $BACKUP_LOG"

echo -e "${YELLOW}üìù PR√ìXIMOS PASSOS:${NC}"
echo "1. Verificar se a aplica√ß√£o est√° funcionando corretamente"
echo "2. Monitorar logs de erro por algumas horas"
echo "3. Fazer backup completo do banco ap√≥s confirma√ß√£o"