#!/usr/bin/env node

/**
 * Script de Valida√ß√£o da Configura√ß√£o do Stripe
 * 
 * Este script valida se todas as vari√°veis de ambiente necess√°rias
 * para o funcionamento do Stripe est√£o configuradas corretamente.
 */

require('dotenv').config({ path: '.env.local' });

const requiredVars = [
  'STRIPE_SECRET_KEY',
  'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY', 
  'STRIPE_WEBHOOK_SECRET',
  'STRIPE_PRO_PRICE_MONTHLY',
  'STRIPE_PRO_PRICE_YEARLY',
  'NEXT_PUBLIC_APP_URL'
];

const optionalVars = [
  'STRIPE_PRO_PRODUCT_ID',
  'STRIPE_ENTERPRISE_PRODUCT_ID',
  'FRONTEND_URL'
];

console.log('üîç VALIDA√á√ÉO DA CONFIGURA√á√ÉO DO STRIPE\n');

let hasErrors = false;

// Verificar vari√°veis obrigat√≥rias
console.log('üìã VARI√ÅVEIS OBRIGAT√ìRIAS:');
requiredVars.forEach(varName => {
  const value = process.env[varName];
  const isValid = value && !value.includes('YOUR_') && !value.includes('_HERE');
  
  if (isValid) {
    console.log(`‚úÖ ${varName}: ${value.substring(0, 20)}...`);
  } else {
    console.log(`‚ùå ${varName}: ${value || 'UNDEFINED'}`);
    hasErrors = true;
  }
});

console.log('\nüìã VARI√ÅVEIS OPCIONAIS:');
optionalVars.forEach(varName => {
  const value = process.env[varName];
  const status = value ? '‚úÖ' : '‚ö†Ô∏è';
  console.log(`${status} ${varName}: ${value || 'N√ÉO DEFINIDA'}`);
});

// Valida√ß√µes espec√≠ficas
console.log('\nüîê VALIDA√á√ïES ESPEC√çFICAS:');

// Verificar formato das chaves Stripe
const secretKey = process.env.STRIPE_SECRET_KEY;
if (secretKey) {
  if (secretKey.startsWith('sk_live_')) {
    console.log('‚úÖ STRIPE_SECRET_KEY: Chave de produ√ß√£o (sk_live_)');
  } else if (secretKey.startsWith('sk_test_')) {
    console.log('‚ö†Ô∏è STRIPE_SECRET_KEY: Chave de teste (sk_test_)');
  } else {
    console.log('‚ùå STRIPE_SECRET_KEY: Formato inv√°lido');
    hasErrors = true;
  }
}

const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
if (publishableKey) {
  if (publishableKey.startsWith('pk_live_')) {
    console.log('‚úÖ NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: Chave de produ√ß√£o (pk_live_)');
  } else if (publishableKey.startsWith('pk_test_')) {
    console.log('‚ö†Ô∏è NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: Chave de teste (pk_test_)');
  } else {
    console.log('‚ùå NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: Formato inv√°lido');
    hasErrors = true;
  }
}

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
if (webhookSecret) {
  if (webhookSecret.startsWith('whsec_')) {
    console.log('‚úÖ STRIPE_WEBHOOK_SECRET: Formato v√°lido (whsec_)');
  } else {
    console.log('‚ùå STRIPE_WEBHOOK_SECRET: Formato inv√°lido (deve come√ßar com whsec_)');
    hasErrors = true;
  }
}

// Verificar Price IDs
const proPriceMonthly = process.env.STRIPE_PRO_PRICE_MONTHLY;
if (proPriceMonthly && proPriceMonthly.startsWith('price_')) {
  console.log('‚úÖ STRIPE_PRO_PRICE_MONTHLY: Formato v√°lido (price_)');
} else {
  console.log('‚ùå STRIPE_PRO_PRICE_MONTHLY: Formato inv√°lido');
  hasErrors = true;
}

const proPriceYearly = process.env.STRIPE_PRO_PRICE_YEARLY;
if (proPriceYearly && proPriceYearly.startsWith('price_')) {
  console.log('‚úÖ STRIPE_PRO_PRICE_YEARLY: Formato v√°lido (price_)');
} else {
  console.log('‚ùå STRIPE_PRO_PRICE_YEARLY: Formato inv√°lido');
  hasErrors = true;
}

// Verificar URLs
const appUrl = process.env.NEXT_PUBLIC_APP_URL;
if (appUrl && (appUrl.startsWith('https://') || appUrl.startsWith('http://'))) {
  console.log(`‚úÖ NEXT_PUBLIC_APP_URL: ${appUrl}`);
} else {
  console.log('‚ùå NEXT_PUBLIC_APP_URL: URL inv√°lida');
  hasErrors = true;
}

// Resultado final
console.log('\nüéØ RESULTADO DA VALIDA√á√ÉO:');
if (hasErrors) {
  console.log('‚ùå CONFIGURA√á√ÉO INV√ÅLIDA - Corrija os erros acima antes de continuar');
  process.exit(1);
} else {
  console.log('‚úÖ CONFIGURA√á√ÉO V√ÅLIDA - Stripe est√° configurado corretamente');
  console.log('\nüìù PR√ìXIMOS PASSOS:');
  console.log('1. Execute: npm run build');
  console.log('2. Execute: npm run start');
  console.log('3. Teste o checkout em: /pricing');
  process.exit(0);
}